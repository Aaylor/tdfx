#!/bin/bash

# $1 <- error msg
error() {
  echo $1 >&2
  exit 1
}

PATTERN="TODO|FIXME|XXX"

RECURSION=0
RECURSION_LIMIT=

usage() {
    cat <<EOF
tdfx is a little script use to find simply where fixmes and todos exists in
a file or a project folder.

  -f       : force to find only fixmes
  -h       : display this help
  -m depth : change the max depth (depth has to be a positive integer)
  -r       : allow folder recursion
  -t       : force to find only todos
  -x       : force to find only xxxs
EOF
}

# $1     <- depth
# ${*:2} <- file and/or folders
tdfx() {
  local depth=$1
  for file in ${*:2}; do
    if [[ -d "$file" ]]; then      # directory
      if [[ ("$RECURSION" = "1" \
              && ( -z $RECURSION_LIMIT || $depth < $RECURSION_LIMIT)) \
              || $depth < 1 ]]; then

        tdfx $(( depth + 1 )) "$(echo "$file"/*)"
      fi
    elif [[ -f "$file" ]]; then    # regular files
      output="$(cat -n "$file" | grep -E "([^a-zA-Z]|^$)($PATTERN)([^a-zA-Z]|^$)")"
      [[ ! -z $output ]] && echo -e "\n$file:" && echo -e "$output"
    else                           # other files
      echo "$file: not supported."
    fi
  done
}

# CLI PARSER
OPTIND=1 # Reset getopts position.
while getopts "hftxrm:" opt; do
  case "$opt" in
      h|\?) usage; exit 0                       ;;
      :) error "-$OPTARG require an argument."  ;;
      f) PATTERN="FIXME"                        ;;
      t) PATTERN="TODO"                         ;;
      x) PATTERN="XXX"                          ;;
      r) RECURSION=1                            ;;
      m) re='^[0-9]+$'
         if [[ $OPTARG =~ $re ]]; then
             RECURSION_LIMIT="$OPTARG"
         else
             error "Option -m require a positive integer argument."
         fi
         ;;
  esac
done
shift $((OPTIND - 1))
test "$1" = "--" && shift

[[ "$#" = "0" ]] && usage && exit 0

tdfx 0 "$*"
