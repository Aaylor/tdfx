#!/bin/bash

OPTIND=1 # Reset getopts position.

# $1 <- error msg
# $2 <- code return
function _error() {
  echo $1 >&2
  exit $2
}

PATTERN="TODO|FIXME|XXX"

RECURSION=0
RECURSION_LIMIT=

USAGE=$(cat <<-EOF
tdfx is a little script use to find simply where fixmes and todos exists in
a file or a project folder.

  -f       : force to find only fixmes
  -h       : display this help
  -m depth : change the max depth (depth has to be a positive integer)
  -r       : allow folder recursion
  -t       : force to find only todos
  -x       : force to find only xxxs
EOF)


# $1     <- depth
# ${*:2} <- file and/or folders
function _tdfx() {
  local CAT=$(which cat)
  local SED=$(which sed)
  if [[ -z $CAT ]]; then
    _error "cat is not installed." 1
  fi
  if [[ -z $SED ]]; then
    _error "sed is not installed." 1
  fi

  local depth=$1

  for file in ${*:2}; do
    if [[ -d "$file" ]]; then      # directory
      if [[ ("$RECURSION" = "1" \
              && ( -z $RECURSION_LIMIT || $depth < $RECURSION_LIMIT)) \
              || $depth < 1 ]]; then

        _tdfx $(( depth + 1 )) "$(echo "$file"/*)"
      fi
    elif [[ -f "$file" ]]; then    # regular files
      echo -e "\n$file:"

      $CAT -n "$file" | grep -E "$PATTERN"
    else                           # other files
      echo "$file: not supported."
    fi
  done
}


# CLI PARSER
while getopts "hftxrm:" opt; do
  case "$opt" in
    h|\?)
      echo "$USAGE"
      exit 0
    ;;
    :)
      _error "-$OPTARG require an argument."
    ;;
    f)
      PATTERN="FIXME"
    ;;
    t)
      PATTERN="TODO"
    ;;
    x)
      PATTERN="XXX"
    ;;
    r)
      RECURSION=1
    ;;
    m)
      re='^[0-9]+$'
      if [[ $OPTARG =~ $re ]]; then
        RECURSION_LIMIT="$OPTARG"
      else
        _error "Option -m require a positive integer argument."
      fi
    ;;
  esac
done
shift $((OPTIND - 1))
test "$1" = "--" && shift

[[ "$#" = "0" ]] && echo "$USAGE" && exit 0


_tdfx 0 "$*"
